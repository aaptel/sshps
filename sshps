#!/usr/bin/env python3
#
# small readline wrapper for interacting with a powershell running
# through ssh
#
# depends of pexpect (pure python package)
# # pip3 install pexpect
#
# it's kind of a hack to make using powershell over an msys2 sshd on
# windows bearable
#
# MIT License (C) 2016, Aurelien Aptel <aaptel@suse.com>
#

import sys
import re
import os
import pexpect
import readline
import shutil
import tempfile
import atexit

HISTORY_FILE = os.path.join(os.path.expanduser("~"), ".sshps_hist")
COMPLETION_FILE = os.path.join(os.path.expanduser("~"), ".sshps_comp")

# what we wait for in the remote session
PS_PROMPT = r'\nPS ([^>]+)> '
PS_EXTENDED = '\n>> '

# what we print to the user
PROMPT = '\033[1;32mPS\033[0m \033[1m{cwd}\033[0m \033[1;32m>\033[0m '

# sentinel to know if we have fallen back to the shell
NEW_SHELL_PROMPT="xxxxxxSHELL_PROMPTxxxxxx"

def main():
    #
    # arg checks
    #

    if not sys.argv[1:] or '-h' in sys.argv or '--help' in sys.argv:
        print('Usage: sshps [ssh opts]\n')
        print("sshps connects to an ssh host, runs powershell there and provides\n"+
              "a nice readline UI for it")
        exit(1)

    repl = REPL(sys.argv[1:], COMPLETION_FILE, HISTORY_FILE)
    while True:
        repl.read_and_run_full_cmd()

class ShellFallbackException(Exception):
    pass

class ConnexionException(Exception):
    pass

class ShellExitedException(Exception):
    pass

class PSNotFoundException(Exception):
    pass


# clean before PS is running
def clean(buf):
    if type(buf) is bytes:
        buf = buf.decode('utf-8')
    buf = re.sub(r'\r+\n+', '\n', buf)
    buf = re.sub(r'[\r\n]+$', '', buf)
    return buf

def decode(s):
    if not s or s == pexpect.EOF:
        return ''
    if isinstance(s, bytes):
        return s.decode('utf-8')
    return str(s)

def screen_lines():
    r = shutil.get_terminal_size()
    return r.lines

class ShellSession:
    def __init__(self, ssh_args):
        try:
            self.c = pexpect.spawn('ssh', ssh_args)
            self.c.setecho(False)
            self.c.expect("[#$] ")
        except Exception as e:
            out = decode(self.c.before) + decode(self.c.after)
            raise ConnexionException(out) from e

        self.c.sendline("PS1=%s"%NEW_SHELL_PROMPT)
        self.c.expect(NEW_SHELL_PROMPT)

    def run(self, cmd):
        try:
            self.c.sendline(cmd)
            r = self.c.expect(NEW_SHELL_PROMPT)
            out = decode(self.c.before)
        except pexpect.EOF as e:
            raise ShellExitedException() from e
        return out

    def quit(self):
        self.c.sendline("exit")
        self.c.expect(pexpect.EOF)

class PSSession:
    def __init__(self, ssh_args):
        try:
            self.c = pexpect.spawn('ssh', ssh_args)
            self.c.setecho(False)
            self.c.expect("[#$] ")
        except Exception as e:
            out = decode(self.c.before) + decode(self.c.after)
            raise ConnexionException(out) from e

        self.c.sendline("PS1=%s"%NEW_SHELL_PROMPT)
        self.c.expect(NEW_SHELL_PROMPT)
        self.c.sendline("powershell")
        r = self.c.expect([PS_PROMPT, 'command not found'], timeout=5)
        if r == 1:
            raise PSNotFoundException()
        self.cwd = decode(self.c.match.group(1))
        self.banner = clean(self.c.before)
        self.extended = False
        self.last_cmd = None
        self.last_full_cmd = None

    def run(self, cmd):
        if not self.extended:
            self.last_full_cmd = ''

        self.last_cmd = cmd
        self.last_full_cmd += cmd

        try:
            self.c.sendline(cmd)
            r = self.c.expect([PS_PROMPT, PS_EXTENDED, NEW_SHELL_PROMPT])
            if r == 1:
                self.extended = True
                return None
            if r == 2:
                raise ShellFallbackException()
            out = decode(self.c.before)
            out = re.sub(r'^\s*(?:%s[\r\n]{1,4}){0,3}\s+'%re.escape(cmd), '', out)
            out = clean(out)
            self.cwd = decode(self.c.match.group(1))
            return out
        except pexpect.EOF as e:
            raise ShellExitedException() from e

    def quit(self):
        self.c.sendline("exit")
        self.c.expect(NEW_SHELL_PROMPT)
        self.c.sendline("exit")
        self.c.wait()

def is_error(s):
    return '+ FullyQualifiedErrorId' in s


class PSComplete():
    def __init__(self, ps_session, comp_file=None):
        self.ps = ps_session
        self.opts_cache = {}
        self.optrx = re.compile(r'''[[{\s](-[a-z0-9_-]+)''', re.I)
        self.cmd_cache = []
        try:
            with open(comp_file) as f:
                for line in f:
                    self.cmd_cache.append(line.strip())
        except FileNotFoundError:
            pass

    def get_cmds(self, cmd):
        out = decode(self.ps.run("get-help %s | select name | ft -autosize"%cmd))
        lines = out.split("\n")
        if is_error(out) or 'Name' not in lines[0]:
            return []
        return sorted([x.strip() for x in lines[2:] if len(x) > 0])

    def get_opts(self, cmd):
        if cmd not in self.opts_cache:
            out = decode(self.ps.run('get-help %s'%cmd))
            if is_error(out):
                self.opts_cache[cmd] = []
            else:
                self.opts_cache[cmd] = sorted(set(re.findall(self.optrx, out)))
        return self.opts_cache[cmd]

    def get_files(self, cwd, path):
        pos = -1
        try:
            pos = path.rindex("\\")
        except ValueError:
            pass
        if pos < 0:
            return self._list_files(cwd, path+"*")
        else:
            pre = path[0:pos]
            return [pre+"\\"+x for x in self._list_files(cwd, pre)]

    def _list_files(self, cwd, path):
        # cd to the right dir
        if self.ps.cwd != cwd:
            out =  decode(self.ps.run('cd %s'%cwd))
            if is_error(out):
                #print("\n\n"+out)
                return []

        # list
        out = decode(self.ps.run('ls %s | select mode,name | ft -autosize'%path))
        lines = out.split("\n")
        if is_error(out) or 'Name' not in lines[0]:
            #print("\n\n"+out)
            return []

        #print("\n\n"+out)
        res = []
        for line in lines[2:]:
            try:
                pos = line.index(' ')
                mode, name = line[0:pos], line[pos+1:].strip()
                if 'd' in mode:
                    name += "\\"
                res.append(name)
            except ValueError:
                pass
        return sorted(res)


class REPL:
    def complete(self, txt, state):
        try:
            if state == 0:
                try:
                    buf = readline.get_line_buffer().split(" ")[0].strip()
                except IndexError:
                    buf = "ls"
                #self.comp_matches = self.comp.get_opts(buf)
                #self.comp_matches = self.comp.get_cmds(txt)
                #self.comp_matches = self.comp.get_files(self.ps.cwd, txt)
            if state < len(self.comp_matches):
                return self.comp_matches[state]
            else:
                return None
        except Exception as e:
            print(e)

    def __init__(self, ssh_args, completion_db, history):
        #
        # readline setup
        #
        try:
            readline.read_history_file(history)
            readline.set_history_length(-1) # infinite
        except FileNotFoundError:
            pass
        readline.set_completer_delims(' \t\n"\'()@#%^&*+/[]<>?')
        readline.parse_and_bind('tab: complete')
        readline.set_completer(lambda txt, state: self.complete(txt, state))
        atexit.register(readline.write_history_file, history)

        #
        # SSH and PS setup
        #
        try:
            self.ps = PSSession(ssh_args)
            self.comp = PSComplete(PSSession(ssh_args), completion_db)
            self.comp_matches = []
        except ConnexionException as e:
            print("[*] ssh connexion failed")
            print(decode(e))
            exit(1)
        except PSNotFoundException:
            print("\n[*] cannot run powershell on remote host (command not found)")
            exit(1)

        print("\n"+self.ps.banner)

    def read_and_run_full_cmd(self):
        try:
            # handle multi-line/incomplete commands
            p = PROMPT.format(cwd=self.ps.cwd)
            while True:
                line = input(p)
                out = self.ps.run(line)
                if not self.ps.extended:
                    break
                p = '>> '

        except ShellFallbackException:
            print("\n[*] powershell exited, exiting...")
            exit(1)
        except ShellExitedException:
            print("\n[*] ssh exited?")
            exit(1)
        except (EOFError, KeyboardInterrupt):
            print("\n[*] exiting...")
            self.ps.quit()
            exit(0)

        # pipe big output through less
        if out.count("\n") > screen_lines():
            with tempfile.NamedTemporaryFile(mode='w+', delete=True) as tmp:
                print(out, file=tmp)
                tmp.flush()
                pager = os.environ.get('PAGER', 'less')
                os.system("%s %s"%(pager, tmp.name))
        else:
            print(out)


if __name__ == '__main__':
    main()
