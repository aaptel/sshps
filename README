What is this?
=============

Suppose you have a Windows machine running an SSH server using msys2.

You are interested in using powershell through it... but you quickly
realize the UI is shit as the powershell exposed that way doesn't have
history, the usual readline/inputrc bindings do nothing or insert
garbage.

Here comes sshps.

Run it with the usual option you would pass to ssh when trying to
access your Windows server.

* sshps will connect to the Windows host and run powershell on its own.
* It reads input using readline, with all the good stuff:
   - usual line editing keybindings
   - command history (kept between runs)
   - command completion
* It sends and runs the command over to the remote powershell session
* Parses and cleans the output (large output are run through a pager)

Usage
=====

    sshps [ssh opts]

Sample run
==========

    aaptel@aaptelpc ~ % ./sshps root@192.168.15.143
    [*] waiting for ssh prompt
    [*] running and waiting for powershell prompt
    
    Windows PowerShell
    Copyright (C) 2016 Microsoft Corporation. All rights reserved.
    PS C:\msys64\home\root > ls
    Directory: C:\msys64\home\root
    
    
    Mode                LastWriteTime         Length Name
    ----                -------------         ------ ----
    d-----       10/20/2016   7:07 AM                .ssh
    -a----       10/20/2016  11:06 AM           1213 .bash_history
    -a----       10/20/2016   8:54 AM              8 foo
    PS C:\msys64\home\root >



Installation
============

* You need python3 and the pexpect package (it's a pure-python
  package). It can be installed with:

    # pip3 install pexpect

You can then just copy sshps somewhere in your $PATH.

* Autocompletion is done from a file listing all possible commands.

You can generate this file yourself:

    $ ./get_completion_db.sh [ssh opts] > ~/.sshps_comp

Or use the one provided:

    $ cp cmdlist ~/.sshps_comp

TODO
====

Complete dynamically using get-help, and try to be context aware.
